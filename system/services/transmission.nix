# Auto-generated using compose2nix v0.2.2-pre.
{ pkgs, lib, ... }:
{
  # Depends on sops and the secrets in there
  imports = [ ../../secrets/sops.nix ];
  sops.secrets.gluetun_private_key = {};
  sops.secrets.gluetun_address = {};

  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."gluetun" = {
    image = "qmcgaw/gluetun";
    environment = {
      "PGID" = "1000";
      "PUID" = "1000";
      "SERVER_CITIES" = "Toronto";
      "TZ" = "America/New_York";
      "VPN_SERVICE_PROVIDER" = "mullvad";
      "VPN_TYPE" = "wireguard";
    };
    volumes = [
      "/run/secrets/gluetun_address:/run/secrets/wireguard_addresses:rw"
      "/run/secrets/gluetun_private_key:/run/secrets/wireguard_private_key:rw"
    ];
    ports = [
      "9091:9091/tcp"
      "51413:51413/tcp"
      "51413:51413/udp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--device=/dev/net/tun:/dev/net/tun"
      "--network-alias=gluetun"
      "--network=transmission_default"
    ];
  };
  systemd.services."docker-gluetun" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-transmission_default.service"
    ];
    requires = [
      "docker-network-transmission_default.service"
    ];
    partOf = [
      "docker-compose-transmission-root.target"
    ];
    wantedBy = [
      "docker-compose-transmission-root.target"
    ];
  };
  virtualisation.oci-containers.containers."transmission" = {
    image = "lscr.io/linuxserver/transmission:latest";
    environment = {
      "PGID" = "1000";
      "PUID" = "1000";
      "TZ" = "America/New_York";
    };
    volumes = [
      "/mnt/notflix/downloads/torrents:/downloads:rw"
      "transmission_config:/config:rw"
    ];
    dependsOn = [
      "gluetun"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network=container:gluetun"
    ];
  };
  systemd.services."docker-transmission" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-volume-transmission_config.service"
    ];
    requires = [
      "docker-volume-transmission_config.service"
    ];
    partOf = [
      "docker-compose-transmission-root.target"
    ];
    wantedBy = [
      "docker-compose-transmission-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-transmission_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f transmission_default";
    };
    script = ''
      docker network inspect transmission_default || docker network create transmission_default
    '';
    partOf = [ "docker-compose-transmission-root.target" ];
    wantedBy = [ "docker-compose-transmission-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-transmission_config" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect transmission_config || docker volume create transmission_config
    '';
    partOf = [ "docker-compose-transmission-root.target" ];
    wantedBy = [ "docker-compose-transmission-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-transmission-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
